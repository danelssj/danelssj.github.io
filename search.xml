<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>收藏算法解题</title>
      <link href="/2019/12/04/%E6%94%B6%E8%97%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E9%A2%98/"/>
      <url>/2019/12/04/%E6%94%B6%E8%97%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="算法收藏"><a href="#算法收藏" class="headerlink" title="算法收藏"></a><strong><em>算法收藏</em></strong></h1><h2 id="1-最大子段和问题"><a href="#1-最大子段和问题" class="headerlink" title="1. 最大子段和问题"></a>1. 最大子段和问题</h2><p><strong>N个整数组成的序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的连续子段和的最大值。当所给的整数均为负数时和为0。</strong></p><p>例如：-2,11,-4,13,-5,-2，和最大的子段为：11,-4,13。和为20。</p><p><strong>输入</strong></p><p>第1行：整数序列的长度N（2 &lt;= N &lt;= 50000)<br>第2 - N + 1行：N个整数（-10^9 &lt;= A[i] &lt;= 10^9）</p><p><strong>输出</strong></p><p>输出最大子段和。</p><p><strong>输入示例</strong></p><p>6<br>-2<br>11<br>-4<br>13<br>-5<br>-2</p><p><strong>输出示例</strong></p><p>20</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态规划</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100050</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a[maxn],dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">dp[i]=a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum=a[<span class="number">1</span>],i,m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[i]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>],m)+a[i];</span><br><span class="line">sum=<span class="built_in">max</span>(sum,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架笔记</title>
      <link href="/2019/12/02/SSM%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/12/02/SSM%E6%A1%86%E6%9E%B6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring框架概述"><a href="#1-Spring框架概述" class="headerlink" title="1 Spring框架概述"></a>1 Spring框架概述</h1><h2 id="1-1-Spring（what-）"><a href="#1-1-Spring（what-）" class="headerlink" title="1.1 Spring（what?）"></a>1.1 Spring（what?）</h2><p>l Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</p><p>l 轻量级：与EJB对比，依赖资源少，销毁的资源少。</p><p>l 分层： 一站式，每一个层都提供的解决方案</p><p>​    web层：struts，spring-MVC</p><p>​    service层：spring</p><p>​    dao层：hibernate，mybatis ， jdbcTemplate -&gt; spring-data</p><h2 id="1-2-Spring-核心"><a href="#1-2-Spring-核心" class="headerlink" title="1.2 Spring 核心"></a>1.2 Spring 核心</h2><p>l Spring的核心是<strong><em>控制反转（依赖注入）（IoC）</em></strong>和<strong><em>面向切面（aspect-oriented programming AOP）</em></strong></p><h2 id="1-3-Spring-优缺点"><a href="#1-3-Spring-优缺点" class="headerlink" title="1.3 Spring 优缺点"></a>1.3 Spring 优缺点</h2><p>1.降低了组件之间的耦合性，实现了软件各层之间的解耦。</p><p>•  Spring就是一个大工厂（容器），可以将所有对象创建和依赖关系维护，交给Spring管理</p><p>•  spring工厂是用于生成bean</p><p>2.可以使用容器提供的众多服务，如事务管理，消息服务等。</p><p>•  只需要通过配置就可以完成对事务的管理，而无需手动编程</p><p>3.容器提供单例模式支持。</p><p>4.容器提供了AOP技术，利用它可以很容易实现一些拦截，如权限拦截，运行期监控等。</p><p>5.容器提供了众多的辅助类，能够加快应用的开发。</p><p>6.spring对于主流的应用框架提供了很好的支持。</p><p>•  Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持</p><p>7.spring属于低入侵式设计。</p><p>8.独立于各种应用服务器。</p><p>9.spring的DI机制降低了业务对象替换的复杂性。</p><p>10spring的高度开放性，并不强制应用完全依赖于它，开发者可以自由选择spring的部分或者全部。</p><p>spring的缺点：</p><p>使用了大量的反射机制，反射机制非常占用内存</p><h2 id="1-4-Spring-体系结构"><a href="#1-4-Spring-体系结构" class="headerlink" title="1.4 Spring 体系结构"></a>1.4 Spring 体系结构</h2><p><img src="C:%5CUsers%5Cdanel%5CDesktop%5Cspring%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%5Cspring1.png" alt="spring1"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PTA_树与图</title>
      <link href="/2019/11/22/PTA_%E6%A0%91%E4%B8%8E%E5%9B%BE/"/>
      <url>/2019/11/22/PTA_%E6%A0%91%E4%B8%8E%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="7-3-玩转二叉树"><a href="#7-3-玩转二叉树" class="headerlink" title="7-3 玩转二叉树"></a>7-3 玩转二叉树</h1><p><strong>描述：</strong><br>  给定一棵二叉树的中序遍历和前序遍历，请你先将树做个镜面反转，再输出反转后的层序遍历的序列。所谓镜面反转，是指将所有非叶结点的左右孩子对换。<br>这里假设键值都是互不相等的正整数。</p><p><strong>输入格式：</strong><br>  输入第一行给出一个正整数N（≤30），是二叉树中结点的个数。第二行给出其中序遍历序列。第三行给出其前序遍历序列。数字间以空格分隔。</p><p><strong>输出格式：</strong><br>  在一行中输出该树反转后的层序遍历的序列。数字间以1个空格分隔，行首尾不得有多余空格。</p><p><strong>输入样例：</strong><br>7<br>1 2 3 4 5 6 7<br>4 1 3 2 6 5 7</p><p><strong>输出样例：</strong><br>4 6 1 7 5 3 2</p><p><strong>代码：</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int pre[31],in[31];</span><br><span class="line">int n;//节点个数</span><br><span class="line">typedef struct BiTNode&#123;</span><br><span class="line">int data;</span><br><span class="line">struct BiTNode *lchild;</span><br><span class="line">struct BiTNode *rchild;</span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line">BiTree Build(int *in,int *pre,int n)&#123;//第一个参数是中序序列的起始位置,第二个参数是后序序列的起始位置,n是长度 </span><br><span class="line">if(n&lt;=0)return NULL;</span><br><span class="line">int *p=in;</span><br><span class="line">while(p)</span><br><span class="line">&#123;</span><br><span class="line">if(*p==*pre)break;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line">BiTree T=new BiTNode;</span><br><span class="line">int len=p-in;</span><br><span class="line">T-&gt;data=*p;</span><br><span class="line">BiTNode* l=Build(in,pre+1,len);</span><br><span class="line">BiTNode* r=Build(p+1,pre+len+1,n-1-len);</span><br><span class="line">if(l==NULL&amp;&amp;r==NULL)</span><br><span class="line">&#123;</span><br><span class="line"> T-&gt;lchild=l;</span><br><span class="line">T-&gt;rchild=r;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    T-&gt;rchild=l;</span><br><span class="line">T-&gt;lchild=r;</span><br><span class="line">&#125;</span><br><span class="line">return T;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void LevelOrder(BiTree root)&#123;</span><br><span class="line">if (root == NULL) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">std::queue&lt;BiTNode *&gt;q;</span><br><span class="line">// 启动</span><br><span class="line">q.push(root);</span><br><span class="line"></span><br><span class="line">while (!q.empty()) &#123;</span><br><span class="line">BiTNode *front = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"></span><br><span class="line">if (front-&gt;lchild != NULL) &#123;</span><br><span class="line">q.push(front-&gt;lchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (front-&gt;rchild != NULL) &#123;</span><br><span class="line">q.push(front-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">if(!q.empty())</span><br><span class="line">cout&lt;&lt;front-&gt;data&lt;&lt;&quot; &quot;;</span><br><span class="line">else cout&lt;&lt;front-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">BiTree T;//只需要定义,不需要赋值-&gt;[BiTree T = new BiTNode;] </span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;in[i];</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;pre[i];</span><br><span class="line">&#125;</span><br><span class="line">T=Build(in,pre,n);</span><br><span class="line">LevelOrder(T);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Netease Cloud</title>
      <link href="/2019/11/22/Netease%20Cloud/"/>
      <url>/2019/11/22/Netease%20Cloud/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/blog1_1.jpg" alt="alt"><br>男人的一生，分为四个阶段。</p><p>喜欢上一个人。Like someone.</p><p>喜欢上一个人。Like to fuck someone.</p><p>喜欢上一个人。Like the last one.</p><p>喜欢上一个人。 Like to be alone.</p><p><strong>——网易云热评《嘿，抬头！ 》</strong></p><p>有部电影中，记得有这样的对话“你愿意为我而死吗？”</p><p>我愿意”</p><p>不，那太简单了，换个问题，你愿意为我而活吗？”</p><p><strong>—— 网易云热评《心安理得》​​</strong></p><p><img src="https://pic2.zhimg.com/80/v2-e1140192244e5a4f2d75a3e01912c159_hd.jpg" alt="alt"></p><p>喜欢上你，并不是你长的好不好看的原因，而是你在特殊的时间里给了我别人给不了的感觉。<br>世界上最美好的三天是:</p><p>有你的那天</p><p>有我的那天</p><p>当你我变成我们的那天。</p><p>——网易云热评《三字言》 ​</p><p><img src="https://pic3.zhimg.com/50/v2-09f989a8e41be443ffbc3587b94157d0_hd.jpg" alt="alt"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>孤独</title>
      <link href="/2019/11/21/%E5%AD%A4%E7%8B%AC/"/>
      <url>/2019/11/21/%E5%AD%A4%E7%8B%AC/</url>
      
        <content type="html"><![CDATA[<p><strong><em>《孤独》</em></strong><br>脚踏赛什腾山<br>思索着<br>就连仓央嘉措都如此孤独<br>何况<br>是我<br>眺望着远处的盆地<br>好想寻见你的影子<br>却茫茫无际</p><a id="more"></a><p>此刻<br>想你犹如<br>想找到脚下的金矿一样迫切<br>红灯沟<br>是一处被遗忘的小金矿<br>待在赛什腾山下<br>如此渺小<br>我是一个探矿者</p><p>因石英脉中见翠绿而狂喜<br>因为这就是要找的金矿<br>踏遍了红灯沟所有的高值点<br>想寻见你的影子<br>如此艰辛<br>爱何不如此<br>用一种信念坚守着<br>那是<br>一份是孤独<br>一份是希望<br>待我俩相聚时<br>犹如红灯沟金矿找矿突破一样<br>探矿者与金矿的结合<br>满满地幸福<br>满满的爱恋<br>不在孤独<br>那绝对是最美的故事</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
